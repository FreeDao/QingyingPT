package cn.edu.hit.pt;import android.content.Context;import cn.edu.hit.pt.http.MyHttpRequest;import cn.edu.hit.pt.http.URLContainer;import cn.edu.hit.pt.impl.PreferenceUtil;import cn.edu.hit.pt.model.User;import com.litesuits.http.LiteHttpClient;import com.litesuits.http.async.HttpAsyncExecutor;import com.litesuits.http.data.HttpStatus;import com.litesuits.http.data.NameValuePair;import com.litesuits.http.exception.HttpClientException;import com.litesuits.http.exception.HttpClientException.ClientException;import com.litesuits.http.exception.HttpException;import com.litesuits.http.exception.HttpNetException;import com.litesuits.http.exception.HttpNetException.NetException;import com.litesuits.http.exception.HttpServerException;import com.litesuits.http.exception.HttpServerException.ServerException;import com.litesuits.http.response.Response;import com.litesuits.http.response.handler.HttpExceptionHandler;import com.litesuits.http.response.handler.HttpResponseHandler;public class LoginManager{	public LoginResult loginResult = new LoginResult();		public interface ICallBack {		/** 登录成功回调接口 */		public void onSuccess();		/** 登录失败回调接口 */		public void onFailed(String error);	}		public class LoginResult{		public String status;		public int code;		public int id;		public String name;		public int uclass;		public String ucname;	}		public void login(final Context context, final String username, final String password, final ICallBack call) {		if (call != null){			MyHttpRequest request = new MyHttpRequest(URLContainer.getLoginUrl(username, password));			HttpAsyncExecutor asyncExecutor = HttpAsyncExecutor.newInstance(LiteHttpClient.newApacheHttpClient(context));			asyncExecutor.execute(request, new HttpResponseHandler() {				    @Override			    public void onSuccess(Response response, HttpStatus status, NameValuePair[] headers) {			    	loginResult = response.getObject(LoginResult.class);										if (!loginResult.status.equals("success") && loginResult.code != 0) {						switch (loginResult.code) {						case 1:							call.onFailed(context.getResources().getString(R.string.request_flooded));							break;						case 2:							call.onFailed(context.getResources().getString(R.string.unsupport_client));							break;						case 3:							call.onFailed(context.getResources().getString(R.string.username_invalid));							break;						case 4:							call.onFailed(context.getResources().getString(R.string.user_account_unconfirmed));							break;						case 5:							call.onFailed(context.getResources().getString(R.string.password_wrong));							break;						case 6:							call.onFailed(context.getResources().getString(R.string.user_disabled));							break;//						case 7://							call.onFailed(context.getResources().getString(R.string.user_no_qualification));//							break;						case 7:							call.onFailed(context.getResources().getString(R.string.user_parked));							break;						default:							call.onFailed(context.getResources().getString(R.string.unknown_error));							break;						}					}else{						//Store Cookies						NameValuePair[] nPair = response.getHeaders();						String cookieString = "";						for (int i = 0; i < nPair.length; i++) {							if(nPair[i].getName().equals("Set-Cookie")){								cookieString += nPair[i].getValue()+";";							}						}						Params.cookie = cookieString;						Params.CURUSER = new User(loginResult.id, loginResult.uclass, loginResult.name, loginResult.ucname);						PreferenceUtil preferenceUtil = new PreferenceUtil(context);						preferenceUtil.savePreference("cookie", cookieString);						preferenceUtil.saveKeyPreference();						call.onSuccess();					}			    }				    @Override			    public void onFailure(Response response, HttpException e) {				        new HttpExceptionHandler() {			            @Override			            protected void onClientException(HttpClientException e, ClientException type) {			            				            }				            @Override			            protected void onNetException(HttpNetException e, NetException type) {		                	if (call != null){				                if (type == NetException.NetworkError) {									call.onFailed(context.getResources().getString(R.string.no_internet_error));				                } else if (type == NetException.UnReachable) {				                	call.onFailed(context.getResources().getString(R.string.no_internet_unreachable));				                } else if (type == NetException.NetworkDisabled) {				                	call.onFailed(context.getResources().getString(R.string.no_internet_disabled));				                }			            	}			            }						@Override						protected void onServerException(HttpServerException e, ServerException type, HttpStatus status) {							if (call != null){								switch (status.getCode()) {								case 404:									call.onFailed(context.getResources().getString(R.string.server_not_found));									break;									default:									break;								}							}						}									        }.handleException(e);			    }			});		}	}    }